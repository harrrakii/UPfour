package com.example.library.service;

import com.example.library.entity.Book;
import com.example.library.entity.Cart;
import com.example.library.entity.User;
import com.example.library.repository.BookRepository;
import com.example.library.repository.CartRepository;
import com.example.library.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@RequiredArgsConstructor
public class CartService {

    private final CartRepository cartRepository;
    private final BookRepository bookRepository;
    private final UserRepository userRepository;

    // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ä–∑–∏–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public List<Cart> getUserCart(Long userId) {
        return cartRepository.findByUserId(userId);
    }

    // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É
    @Transactional
    public Cart addToCart(Long userId, Long bookId, Integer quantity) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        Book book = bookRepository.findById(bookId)
                .orElseThrow(() -> new RuntimeException("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∫–Ω–∏–≥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        Cart cartItem = cartRepository.findByUserIdAndBookId(userId, bookId).orElse(null);

        // üìò –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –µ—â—ë –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
        if (cartItem == null) {
            if (quantity > book.getStockQuantity()) {
                throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥–∏. –î–æ—Å—Ç—É–ø–Ω–æ: " + book.getStockQuantity());
            }

            Cart newCart = new Cart();
            newCart.setUser(user);
            newCart.setBook(book);
            newCart.setQuantity(quantity);
            return cartRepository.save(newCart);
        }

        // üìò –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        int updatedQuantity = cartItem.getQuantity() + quantity;

        if (updatedQuantity > book.getStockQuantity()) {
            throw new RuntimeException("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ. –ú–∞–∫—Å–∏–º—É–º: " + book.getStockQuantity());
        }

        cartItem.setQuantity(updatedQuantity);
        return cartRepository.save(cartItem);
    }

    // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    @Transactional
    public Cart updateQuantity(Long cartId, Integer newQuantity) {
        Cart cart = cartRepository.findById(cartId)
                .orElseThrow(() -> new RuntimeException("–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        if (newQuantity > cart.getBook().getStockQuantity()) {
            throw new RuntimeException("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–Ω–∏–≥–∏. –î–æ—Å—Ç—É–ø–Ω–æ: " + cart.getBook().getStockQuantity());
        }

        cart.setQuantity(newQuantity);
        return cartRepository.save(cart);
    }

    // ‚úÖ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
    @Transactional
    public void deleteItem(Long id) {
        if (!cartRepository.existsById(id)) {
            throw new RuntimeException("–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        cartRepository.deleteById(id);
    }

    // ‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @Transactional
    public void clearCart(Long userId) {
        cartRepository.deleteByUserId(userId);
    }
}
