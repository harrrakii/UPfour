package com.example.library.controller;

import com.example.library.dto.OrderDTO;
import com.example.library.entity.Order;
import com.example.library.entity.User;
import com.example.library.repository.UserRepository;
import com.example.library.service.OrderService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/orders")
@RequiredArgsConstructor
public class OrderController {

    private final OrderService orderService;
    private final UserRepository userRepository;

    // ‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    @GetMapping
    public List<Order> getAllOrders() {
        return orderService.findAll();
    }

    // ‚úÖ –ó–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping("/my")
    public List<Order> getMyOrders() {
        Long userId = getCurrentUserId();
        return orderService.findByUser(userId);
    }

    // ‚úÖ –û–¥–∏–Ω –∑–∞–∫–∞–∑
    @GetMapping("/{id}")
    public ResponseEntity<Order> getOrderById(@PathVariable Long id) {
        return ResponseEntity.ok(orderService.findById(id));
    }

    // ‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DTO)
    @PostMapping
    public ResponseEntity<?> createOrderFromCart() {
        Long userId = getCurrentUserId();
        try {
            OrderDTO dto = orderService.createFromCart(userId);
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    // ‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    @PutMapping("/{id}/status")
    public ResponseEntity<Order> updateStatus(@PathVariable Long id, @RequestParam String status) {
        return ResponseEntity.ok(orderService.updateStatus(id, status));
    }

    // ‚úÖ –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteOrder(@PathVariable Long id) {
        orderService.delete(id);
        return ResponseEntity.noContent().build();
    }

    // üîí –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private Long getCurrentUserId() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String username = auth.getName();
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + username));
        return user.getId();
    }
}
