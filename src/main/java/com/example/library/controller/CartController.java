package com.example.library.controller;

import com.example.library.dto.CartDTO;
import com.example.library.entity.Cart;
import com.example.library.entity.User;
import com.example.library.repository.UserRepository;
import com.example.library.service.CartService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/cart")
@RequiredArgsConstructor
public class CartController {

    private final CartService cartService;
    private final UserRepository userRepository;

    // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @GetMapping
    public List<CartDTO> getMyCart() {
        Long userId = getCurrentUserId();
        List<Cart> cartItems = cartService.getUserCart(userId);

        return cartItems.stream().map(item -> {
            var book = item.getBook();
            return new CartDTO(
                    item.getId(),
                    book != null ? book.getTitle() : "‚Äî",
                    (book != null && book.getAuthor() != null) ? book.getAuthor().getName() : "‚Äî",
                    (book != null && book.getPublisher() != null) ? book.getPublisher().getName() : "‚Äî",
                    item.getQuantity(),
                    book != null ? book.getPrice() : BigDecimal.ZERO,
                    book != null ? book.getPrice().multiply(BigDecimal.valueOf(item.getQuantity())) : BigDecimal.ZERO
            );
        }).collect(Collectors.toList());
    }

    // ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É
    @PostMapping("/{bookId}")
    public ResponseEntity<Cart> addBookToCart(@PathVariable Long bookId,
                                              @RequestParam(defaultValue = "1") Integer quantity) {
        Long userId = getCurrentUserId();
        return ResponseEntity.ok(cartService.addToCart(userId, bookId, quantity));
    }

    // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    @PutMapping("/{cartId}")
    public ResponseEntity<Cart> updateQuantity(@PathVariable Long cartId,
                                               @RequestParam Integer quantity) {
        return ResponseEntity.ok(cartService.updateQuantity(cartId, quantity));
    }

    // ‚úÖ –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
    @DeleteMapping("/{cartId}")
    public ResponseEntity<Void> deleteItem(@PathVariable Long cartId) {
        cartService.deleteItem(cartId);
        return ResponseEntity.noContent().build();
    }

    // ‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    @DeleteMapping("/clear")
    public ResponseEntity<Void> clearCart() {
        cartService.clearCart(getCurrentUserId());
        return ResponseEntity.noContent().build();
    }

    // üîí –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private Long getCurrentUserId() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String username = auth.getName();
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + username));
        return user.getId();
    }
}
